{"version":3,"file":"bundle.f3b1a91a81805917ba05.js","mappings":"mBAEA,IAAIA,EACAC,EACAC,EACAC,EAEU,IAAIC,MAAMC,QACT,IAAID,MAAMC,QACN,IAAID,MAAMC,QAAQC,OAAOC,WAAa,EAAGD,OAAOE,YAAc,GAKjF,WACIN,EAAQ,IAAIE,MAAMK,MAElB,MACMC,EAASJ,OAAOC,YAAmC,EAArBD,OAAOE,aAI3CR,EAAS,IAAII,MAAMO,kBALP,EAK8BD,EAH7B,GACD,MAGZV,EAAOY,SAASC,IAAI,EAAG,EAAG,GAC1BX,EAAMY,SAASC,GAAK,IAAMC,KAAKC,GAAK,IACpC,MAAMC,EAAU,IAAId,MAAMe,aAAa,SAAU,GACjDjB,EAAMkB,IAAIF,GAEV,MAAMG,EAAQ,IAAIjB,MAAMkB,iBAAiB,SAAU,GACnDD,EAAMT,SAASC,IAAI,GAAI,GAAI,KAC3BX,EAAMkB,IAAIC,IAEK,IAAIjB,MAAMmB,YAClBC,KACH,qBACA,SAASC,GAELvB,EAAMkB,IAAIK,EAAKvB,OAEfwB,KAAKC,eAAeC,eAEpBF,KAAKG,GAAGJ,EAAKvB,MAAMY,SAAU,CACzBgB,cAAe,CACXC,QAAS,WACTC,MAAO,UACPC,IAAK,UACLC,SAAS,EACTC,OAAO,EACPC,cAAe,8BAEnBrB,EAAa,EAAVC,KAAKC,IAEhB,IACCoB,IACGC,QAAQC,IAAKF,EAAIG,OAASH,EAAII,MAAS,IAAM,WAAW,IAE3DC,IACGJ,QAAQC,IAAIG,EAAM,KAIV,IAAItC,MAAMmB,YAClBC,KACJ,yBACA,SAASC,GACLvB,EAAMkB,IAAIK,EAAKvB,OAGfwB,KAAKC,eAAeC,eAEpBF,KAAKG,GAAGJ,EAAKvB,MAAMY,SAAU,CACzBgB,cAAe,CACXC,QAAS,WACTC,MAAO,UACPC,IAAK,UACLC,SAAS,EACTC,OAAO,EACPC,cAAe,8BAEnBrB,EAAGC,KAAKC,IAEhB,IACCoB,IACGC,QAAQC,IAAKF,EAAIG,OAASH,EAAII,MAAS,IAAM,WAAW,IAE3DC,IACGJ,QAAQC,IAAIG,EAAM,IAI1BzC,EAAW,IAAIG,MAAMuC,cAAc,CAC/BC,WAAW,EACXC,OAAO,IAEX5C,EAAS6C,cAAcxC,OAAOyC,kBAC9B9C,EAAS+C,QAAQ1C,OAAOC,WAAiC,EAArBD,OAAOE,aAC3CyC,SAASC,eAAe,KAAKC,YAAYlD,EAASmD,YAClDjD,EAAW,IAAIC,MAAMiD,cAAcrD,EAAQC,EAASmD,YACpDjD,EAASmD,eAAgB,EACzBnD,EAASoD,YAAa,EACtBpD,EAASqD,WAAY,CACzB,CA1FAC,GA6FA,SAASC,IACLC,sBAAsBD,GAEtBzD,EAAS2D,OAAO1D,EAAOF,EAC3B,CAhGA0D,GAmGiBT,SAASY,iBAAiB,SAChCC,SAASC,IACZA,EAAMC,OAAQ,EACd,IAAIC,EAAcF,EAAMG,YACJC,IAAhBF,GACAA,EAAYG,MAAMC,IACC,IAAIC,sBACdC,IACGA,EAAQT,SAASU,IAEmB,IAA5BA,EAAMC,mBACLV,EAAMW,OAGAX,EAAMW,QACbX,EAAMG,OAFNH,EAAMY,OAGV,GACF,GACH,CAAEC,UAAW,KAEXC,QAAQd,EAAM,GAE/B,G","sources":["webpack:///./src/script.js"],"sourcesContent":["import \"./styles.css\";\n\nlet camera;\nlet renderer;\nlet scene;\nlet controls;\n\nconst mouse = new THREE.Vector2();\nconst target = new THREE.Vector2();\nconst windowHalf = new THREE.Vector2(window.innerWidth / 2, window.innerHeight / 2);\n\ninit();\nanimate();\n\nfunction init() {\n    scene = new THREE.Scene();\n\n    const fov = 5;\n    const aspect = window.innerWidth / (window.innerHeight * 2);\n    const near = 0.1;\n    const far = 1500;\n\n    camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.set(5, 0, 0);\n    scene.rotation.y = -270 * Math.PI / 180;\n    const ambient = new THREE.AmbientLight(0xffffff, 2);\n    scene.add(ambient);\n\n    const light = new THREE.DirectionalLight(0xffffff, 2);\n    light.position.set(50, 50, 100);\n    scene.add(light);\n\n    const loader = new THREE.GLTFLoader()\n    loader.load(\n        'models/neo-v1.glb',\n        function(gltf) {\n\n            scene.add(gltf.scene)\n\n            gsap.registerPlugin(ScrollTrigger);\n\n            gsap.to(gltf.scene.rotation, {\n                scrollTrigger: {\n                    trigger: \"#trigger\",\n                    start: \"+=150px\",\n                    end: \"+=360px\",\n                    markers: false,\n                    scrub: true,\n                    toggleActions: \"restart pause resume pause\"\n                },\n                y: Math.PI * 2\n            });\n        },\n        (xhr) => {\n            console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n        },\n        (error) => {\n            console.log(error)\n        }\n    )\n\n    const loader2 = new THREE.GLTFLoader()\n    loader2.load(\n        'models/bg-boxes-9.glb',\n        function(gltf) {\n            scene.add(gltf.scene)\n\n\n            gsap.registerPlugin(ScrollTrigger);\n\n            gsap.to(gltf.scene.rotation, {\n                scrollTrigger: {\n                    trigger: \"#trigger\",\n                    start: \"+=150px\",\n                    end: \"+=360px\",\n                    markers: false,\n                    scrub: true,\n                    toggleActions: \"restart pause resume pause\"\n                },\n                y: Math.PI\n            });\n        },\n        (xhr) => {\n            console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n        },\n        (error) => {\n            console.log(error)\n        }\n    )\n\n    renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight * 2);\n    document.getElementById(\"c\").appendChild(renderer.domElement);\n    controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.enableZoom = false;\n    controls.enablePan = false;\n}\n\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    // controls.update();\n    renderer.render(scene, camera);\n}\n\nfunction playPauseVideo() {\n    let videos = document.querySelectorAll(\"video\");\n    videos.forEach((video) => {\n        video.muted = true;\n        let playPromise = video.play();\n        if (playPromise !== undefined) {\n            playPromise.then((_) => {\n                let observer = new IntersectionObserver(\n                    (entries) => {\n                        entries.forEach((entry) => {\n                            if (\n                                entry.intersectionRatio !== 1 &&\n                                !video.paused\n                            ) {\n                                video.pause();\n                            } else if (video.paused) {\n                                video.play();\n                            }\n                        });\n                    }, { threshold: 0.2 }\n                );\n                observer.observe(video);\n            });\n        }\n    });\n}\n\nplayPauseVideo();"],"names":["camera","renderer","scene","controls","THREE","Vector2","window","innerWidth","innerHeight","Scene","aspect","PerspectiveCamera","position","set","rotation","y","Math","PI","ambient","AmbientLight","add","light","DirectionalLight","GLTFLoader","load","gltf","gsap","registerPlugin","ScrollTrigger","to","scrollTrigger","trigger","start","end","markers","scrub","toggleActions","xhr","console","log","loaded","total","error","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","document","getElementById","appendChild","domElement","OrbitControls","enableDamping","enableZoom","enablePan","init","animate","requestAnimationFrame","render","querySelectorAll","forEach","video","muted","playPromise","play","undefined","then","_","IntersectionObserver","entries","entry","intersectionRatio","paused","pause","threshold","observe"],"sourceRoot":""}